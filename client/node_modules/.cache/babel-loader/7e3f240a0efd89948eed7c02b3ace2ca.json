{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n// Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = formData => async dispatch => {\n  try {\n    const res = await api.post('/users', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","formData","post","errors","response","forEach","error","msg","login","email","password","body","logout"],"sources":["/home/rachitverma/Rachit/UDEMY/7. React Redux Express Mongodb/Second/devconnector_2.0/client/src/actions/auth.js"],"sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await api.get('/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/users', formData);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const body = { email, password };\n\n  try {\n    const res = await api.post('/auth', body);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type: LOGOUT });\n"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,MAPF,QAQO,SARP;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQ,OAAR,CAAlB;IAEAF,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPU,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;EAID,CAPD,CAOE,OAAOC,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAER;IADC,CAAD,CAAR;EAGD;AACF,CAbM,C,CAeP;;AACA,OAAO,MAAMY,QAAQ,GAAIC,QAAD,IAAc,MAAOR,QAAP,IAAoB;EACxD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAAS,QAAT,EAAmBD,QAAnB,CAAlB;IAEAR,QAAQ,CAAC;MACPG,IAAI,EAAEX,gBADC;MAEPY,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;IAIAL,QAAQ,CAACD,QAAQ,EAAT,CAAR;EACD,CARD,CAQE,OAAOO,GAAP,EAAY;IACZ,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;IAEA,IAAIA,MAAJ,EAAY;MACVA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;IACD;;IAEDd,QAAQ,CAAC;MACPG,IAAI,EAAEV;IADC,CAAD,CAAR;EAGD;AACF,CApBM,C,CAsBP;;AACA,OAAO,MAAMsB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOjB,QAAP,IAAoB;EAC5D,MAAMkB,IAAI,GAAG;IAAEF,KAAF;IAASC;EAAT,CAAb;;EAEA,IAAI;IACF,MAAMhB,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAAS,OAAT,EAAkBS,IAAlB,CAAlB;IAEAlB,QAAQ,CAAC;MACPG,IAAI,EAAEP,aADC;MAEPQ,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;IAKAL,QAAQ,CAACD,QAAQ,EAAT,CAAR;EACD,CATD,CASE,OAAOO,GAAP,EAAY;IACZ,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;IAEA,IAAIA,MAAJ,EAAY;MACVA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;IACD;;IAEDd,QAAQ,CAAC;MACPG,IAAI,EAAEN;IADC,CAAD,CAAR;EAGD;AACF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMsB,MAAM,GAAG,OAAO;EAAEhB,IAAI,EAAEL;AAAR,CAAP,CAAf"},"metadata":{},"sourceType":"module"}