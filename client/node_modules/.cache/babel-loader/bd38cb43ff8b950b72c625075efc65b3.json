{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\n\nlet currentState = store.getState();\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState(); // if the token changes set the value in localStorage and axios headers\n\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"sources":["/home/rachitverma/Rachit/UDEMY/7. React Redux Express Mongodb/self-code/To do list/client/src/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\nlet currentState = store.getState();\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACvBI,WADuB,EAEvBE,YAFuB,EAGvBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHI,CAAzB;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,IAAIE,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAnB;AAEAF,KAAK,CAACG,SAAN,CAAgB,MAAM;EACpB;EACA,IAAIC,aAAa,GAAGH,YAApB;EACAA,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAf,CAHoB,CAIpB;;EACA,IAAIE,aAAa,CAACC,IAAd,CAAmBC,KAAnB,KAA6BL,YAAY,CAACI,IAAb,CAAkBC,KAAnD,EAA0D;IACxD,MAAMA,KAAK,GAAGL,YAAY,CAACI,IAAb,CAAkBC,KAAhC;IACAT,YAAY,CAACS,KAAD,CAAZ;EACD;AACF,CATD;AAWA,eAAeN,KAAf"},"metadata":{},"sourceType":"module"}