{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_TASKS, TASK_ERROR, DELETE_TASK, UPDATE_TASK, ADD_TASK, GET_TASK } from './types';\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n// Get tasks\n\nexport const getTasks = () => async dispatch => {\n  try {\n    const res = await api.get('/list/me'); // const res = await api.get('/list');\n\n    dispatch({\n      type: GET_TASKS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete task\n\nexport const deleteTask = id => async dispatch => {\n  try {\n    await api.delete(`/list/${id}`);\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n    dispatch(setAlert('Task Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Update task\n\nexport const updateTask = (id, formData) => async dispatch => {\n  try {\n    await api.put(`/list/${id}`);\n    dispatch({\n      type: UPDATE_TASK,\n      payload: formData\n    });\n    dispatch(setAlert('Task Updated', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add task\n\nexport const addTask = formData => async dispatch => {\n  try {\n    const res = await api.post('/list', formData);\n    dispatch({\n      type: ADD_TASK,\n      payload: res.data\n    });\n    dispatch(setAlert('Task Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      // payload: { msg: err.response.statusText, status: err.response.status }\n      payload: {\n        msg: err.response,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get task\n\nexport const getTask = id => async dispatch => {\n  try {\n    const res = await api.get(`/list/${id}`);\n    dispatch({\n      type: GET_TASK,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"names":["api","setAlert","GET_TASKS","TASK_ERROR","DELETE_TASK","UPDATE_TASK","ADD_TASK","GET_TASK","getTasks","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","deleteTask","id","delete","updateTask","formData","put","addTask","post","getTask"],"sources":["/home/rachitverma/Rachit/UDEMY/7. React Redux Express Mongodb/self-code/To do list/client/src/actions/task.js"],"sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  GET_TASKS,\n  TASK_ERROR,\n  DELETE_TASK,\n  UPDATE_TASK,\n  ADD_TASK,\n  GET_TASK,\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Get tasks\nexport const getTasks = () => async (dispatch) => {\n  try {\n    const res = await api.get('/list/me');\n    // const res = await api.get('/list');\n\n    dispatch({\n      type: GET_TASKS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n// Delete task\nexport const deleteTask = (id) => async (dispatch) => {\n  try {\n    await api.delete(`/list/${id}`);\n\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n\n    dispatch(setAlert('Task Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Update task\nexport const updateTask = (id,formData) => async (dispatch) => {\n  try { \n    await api.put(`/list/${id}`);\n    dispatch({\n      type: UPDATE_TASK,\n      payload: formData\n    });\n    dispatch(setAlert('Task Updated', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add task\nexport const addTask = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/list', formData);\n\n    dispatch({\n      type: ADD_TASK,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Task Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      // payload: { msg: err.response.statusText, status: err.response.status }\n      payload: { msg: err.response, status: err.response.status }\n\n    });\n  }\n};\n\n// Get task\nexport const getTask = (id) => async (dispatch) => {\n  try {\n    const res = await api.get(`/list/${id}`);\n\n    dispatch({\n      type: GET_TASK,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: TASK_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,SADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,QANF,QAOO,SAPP;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQ,UAAR,CAAlB,CADE,CAEF;;IAEAF,QAAQ,CAAC;MACPG,IAAI,EAAEV,SADC;MAEPW,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;EAID,CARD,CAQE,OAAOC,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAET,UADC;MAEPU,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;QAAgCC,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;MAArD;IAFF,CAAD,CAAR;EAID;AACF,CAfM,C,CAkBP;;AACA,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ,MAAOZ,QAAP,IAAoB;EACpD,IAAI;IACF,MAAMT,GAAG,CAACsB,MAAJ,CAAY,SAAQD,EAAG,EAAvB,CAAN;IAEAZ,QAAQ,CAAC;MACPG,IAAI,EAAER,WADC;MAEPS,OAAO,EAAEQ;IAFF,CAAD,CAAR;IAKAZ,QAAQ,CAACR,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;EACD,CATD,CASE,OAAOc,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAET,UADC;MAEPU,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;QAAgCC,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;MAArD;IAFF,CAAD,CAAR;EAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMI,UAAU,GAAG,CAACF,EAAD,EAAIG,QAAJ,KAAiB,MAAOf,QAAP,IAAoB;EAC7D,IAAI;IACF,MAAMT,GAAG,CAACyB,GAAJ,CAAS,SAAQJ,EAAG,EAApB,CAAN;IACAZ,QAAQ,CAAC;MACPG,IAAI,EAAEP,WADC;MAEPQ,OAAO,EAAEW;IAFF,CAAD,CAAR;IAIAf,QAAQ,CAACR,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;EACD,CAPD,CAOE,OAAOc,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAET,UADC;MAEPU,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;QAAgCC,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;MAArD;IAFF,CAAD,CAAR;EAID;AACF,CAdM,C,CAgBP;;AACA,OAAO,MAAMO,OAAO,GAAIF,QAAD,IAAc,MAAOf,QAAP,IAAoB;EACvD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAAC2B,IAAJ,CAAS,OAAT,EAAkBH,QAAlB,CAAlB;IAEAf,QAAQ,CAAC;MACPG,IAAI,EAAEN,QADC;MAEPO,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;IAKAL,QAAQ,CAACR,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;EACD,CATD,CASE,OAAOc,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAET,UADC;MAEP;MACAU,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAX;QAAqBE,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;MAA1C;IAHF,CAAD,CAAR;EAMD;AACF,CAlBM,C,CAoBP;;AACA,OAAO,MAAMS,OAAO,GAAIP,EAAD,IAAQ,MAAOZ,QAAP,IAAoB;EACjD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAS,SAAQU,EAAG,EAApB,CAAlB;IAEAZ,QAAQ,CAAC;MACPG,IAAI,EAAEL,QADC;MAEPM,OAAO,EAAEH,GAAG,CAACI;IAFN,CAAD,CAAR;EAID,CAPD,CAOE,OAAOC,GAAP,EAAY;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAET,UADC;MAEPU,OAAO,EAAE;QAAEG,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;QAAgCC,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;MAArD;IAFF,CAAD,CAAR;EAID;AACF,CAdM"},"metadata":{},"sourceType":"module"}